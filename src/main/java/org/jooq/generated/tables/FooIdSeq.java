/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.generated.Public;
import org.jooq.generated.tables.records.FooIdSeqRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FooIdSeq extends TableImpl<FooIdSeqRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.foo_id_seq</code>
     */
    public static final FooIdSeq FOO_ID_SEQ = new FooIdSeq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FooIdSeqRecord> getRecordType() {
        return FooIdSeqRecord.class;
    }

    private FooIdSeq(Name alias, Table<FooIdSeqRecord> aliased) {
        this(alias, aliased, null);
    }

    private FooIdSeq(Name alias, Table<FooIdSeqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.foo_id_seq</code> table reference
     */
    public FooIdSeq(String alias) {
        this(DSL.name(alias), FOO_ID_SEQ);
    }

    /**
     * Create an aliased <code>public.foo_id_seq</code> table reference
     */
    public FooIdSeq(Name alias) {
        this(alias, FOO_ID_SEQ);
    }

    /**
     * Create a <code>public.foo_id_seq</code> table reference
     */
    public FooIdSeq() {
        this(DSL.name("foo_id_seq"), null);
    }

    public <O extends Record> FooIdSeq(Table<O> child, ForeignKey<O, FooIdSeqRecord> key) {
        super(child, key, FOO_ID_SEQ);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public FooIdSeq as(String alias) {
        return new FooIdSeq(DSL.name(alias), this);
    }

    @Override
    public FooIdSeq as(Name alias) {
        return new FooIdSeq(alias, this);
    }

    @Override
    public FooIdSeq as(Table<?> alias) {
        return new FooIdSeq(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FooIdSeq rename(String name) {
        return new FooIdSeq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FooIdSeq rename(Name name) {
        return new FooIdSeq(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FooIdSeq rename(Table<?> name) {
        return new FooIdSeq(name.getQualifiedName(), null);
    }
}
